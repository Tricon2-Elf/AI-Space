
		 mm-suite  GMSV -- CLIENT protocol (Translated from Japanese)

         Server process uses circ_t, in the other hand client process
         uses conn_t.
         You can remove any protocol commands if you don't need them in your
         own game.
		 
=protocolname gameproto
=serverconnection circ

=workbufsize 32768
  This size have to be larger than the max data length
  sent by a call of protocol command.
  
  
=version 10001
  Majour number of this protocol.

#
#
# Core commands
#

  
= c2s 1 ping ( int msgid, int majorversion, int minorversion, int tick )
= s2c 2 pong ( int msgid, int majorversion, int minorversion, int tick )

  When client sends ping to the server, the server will reply
  pong when receiving ping.

  Client includes its version numbers in ping protocol call.
majorversion is major version number defined in this file,
and minorversion is sub-version number which is generated by
gen.rb according to content of this file.
The server returns its major version and minor version in the same way
as client.
You cannot use any services if your version differs from server's,
because the server doesn't set flag of "version check is OK about
this client". So, you have to send "ping" at least one time.
The server will return "tick" argument as it is, so you can use
it as you like. But, it can be very useful for counting
"packet round trip time" between client and server by
entering GetTickCount() value.

= s2c 4 shutdown_pasv ( char reason[200] )

  The server will call this protocol command in cases that
  the server knows its future shutdown. The client can show the user
an warning message.

#
# Authorization commands
# GMSV will send these commands to backend AUTHSV just as it is,
# without any interfering.
#

= c2s 5 create_user   ( int msgid, char password[32], char nick[32] )
= s2c 6 create_user_r ( int msgid, int result, char new_id[32] )

  Create and initialize new user account. You can specify nick name
and password as hints.
  result is 0 if successful. Otherwize it is an error code.
  new_id is valid only when the request is successful.

  
= c2s 7 delete_user   ( int msgid, char id[32], char password[32] )
= s2c 8 delete_user_r ( int msgid, int result )

  Delete a user account. result is 0 if successful. Otherwise fail.
To delete the user account, the password is needed.


= c2s 9 check_password   ( int msgid, char id[32], char password[32], char cdkey[32] )
= s2c 10 check_password_r ( int msgid, int result )

  Check the user's password before logging in to the server.
CD-KEY is also checked at the same time.
  CD-KEY is an ID string to block two users 
  logging in to the game, who have the same CD.
  GMSV sends this CD-KEY ID to the LOCKSV as it is.
  Returns 0 if successfully password is checked. Otherwise fail.
  Any other effective protocol commands are called after
  success of check_password protocol.
  GMSV will cache id[32] in circ_t's state buffer for future use.


= c2s 11 change_password    ( int msgid, char id[32], char password[32], char new_password[32] )
= s2c 12 change_password_r ( int msgid, int result )

  Change user password.
  result is 0 if successful, otherwise fail.

= c2s 13 logout_user       ( int msgid )

  The user log-outs from the server.
  GMSV will release all related resources, locks, and closes session.
  This command has no reply from the server, because the server
  closes the connection.
  
#
# Storage commands ( Character information storage)
#
# In mm-suite, each user have multiple character slots.
# But, each user can use only one character at the same time.
# 
# create_character, delete_character creates/deletes user's character.
# login_character specifies a character as "current character".
# Game session is just a sequence in which it is changing the
# status of this current character.
# save_current_character saves character status in server database(DBSV).
# logout_character saves the current character and quits from the game.
# Please note that logout_character does not finish game session.
# To quit from whole game session ,you have to call logout_user command.

= c2s 15 create_character    ( int msgid, char name[128], int hp )
= s2c 16 create_character_r  ( int msgid, int result, int new_slotid )

  Create a new character. As a hint of creating a new character,
  you can specify character name, and hit points for demonstration.
  In actual game application, you will have a lot more infomration
  when creating character.
  new_slotis is valid when result is 0(successful).
  new_slotid is the slot number, the slot is containing newly
  created character. 

  
= c2s 17 delete_character    ( int msgid, int slotid )
= s2c 18 delete_character_r  ( int msgid, int result )

  Delete user's character. result is 0 if successful, otherwise fail.

  
= c2s 19 login_character   ( int msgid, int slotid )
= s2c 20 login_character_r ( int msgid, int result )
= s2c 22 character_serial_pasv  ( int c_serial )

  Load a character from the slot, and log in to the game world.
  GMSV reproduces position of the character, and make connection switching
  if it's needed. Connection switching is needed if the character is
  placed out of control of this GMSV.
  After success of this command, the character is registered as
  "current character", and after changing character status,
  you have to send save_current_character to save that information.
  All changes are made to "current character".
  GMSV will activate LOCKSV's lock to avoid double log in of one
  character.
  character_serial_pasv command is also important.
  You will now your character index inside GMSV by this command.
  This command is sent when index number of your character is changed,
  in cases that the connection switching.

  *NOTE*
    Client have to erase all characters displayed in the screen,
    when receiving character_serial_pasv command from the server.
  
= c2s 23 save_current_character   ( int msgid )
= s2c 24 save_current_character_r ( int msgid, int result )

  Save current character in database. You don't have to send
  slotID because current character is saved in GMSV's state buffer.
  This command will fail if you call this before current character is set.


= c2s 25 logout_current_character   ( int msgid )
= s2c 26 logout_current_character_r ( int msgid, int result )

    Save current character and release it.
  All game requests are invalid after this protocol command,
  because current character is not existent.

= c2s 27 get_character_tag_list   ( int msgid )
= s2c 28 get_character_tag_list_r ( int msgid, int result, stringarray tags[100][128], int slotids[100] )

   Get all character tag information in all character slot.
   Both tags[n] and slotids[n] are corresponding each other.
   For example, tag information of character saved in slot(slotids[0])
   is stored in tags[0].


#
# Contact list control commands
#
# Contactlist is maintained by GMSV because you can make the list have
# relationships with your game logic. 
#
#
= c2s 31 save_contact   ( int msgid, stringarray id[10][32], stringarray groupid[10] [32] )
= s2c 32 save_contact_r ( int msgid, int result )

  Save contactlist in backend. In mm-suite initial distribution,
  the max number of contact list members is set 10.
  If you want to have more, you can change [10] to [100] or any amount.
  
  result=0: OK
  result<0: Fail
  

= c2s 33 load_contact   ( int msgid )
= s2c 34 load_contact_r ( int msgid, int result, stringarray id[10][32], stringarray groupid[10] [32] )

  Load contact list from server.
  id and groupid argument is valid only when result is zero.
  In initial mm-suite distribution, the max number of contact list
  members is 10.
  
  result=0: OK
  result<0: Fail


= c2s 35 new_contact_status       ( int optflag )
= s2c 36 new_contact_status_pasv  ( char id[32], int flag, int opt )

    Client program have to send new status by this protocol command
  when the user's status is changed.
  When GMSV receives this command, it will notify MSGSV by msgproto's 
  user_new_status command.
  MSGSV will notify all members who are listed in contact list.

    
#
#
# Movement inside game world
#
# When you send new position or status to GMSV, the changes are
# broadcasted to your neighbour NPC or players.
#
# double/float types cannot be sent directly because it is not
# compatible between machines and OSes. So float values are 
# converted into int values by fixed point fraction.
#


=c2s 71 notify_location ( int x, int y, int z )
=s2c 72 notify_location_pasv ( int c_serial, int x, int y, int z )

  Send this command to GMSV when the player wants to move.

  1. If user character is moved inside client program,
     it have to send new position by notify_location command.

  2. GMSV checks the new position, and return correct position if
     the character could not walk to the position, for example
     the character is going through a wall.
     notify_location_pasv command is also sent to neighbour players.

  3. Client program make the character warp to the position that
     is told by GMSV by notify_location_r command.

  4. If the character is not existent in client process,
     You will add new character in client. You can use c_serial value
     for checking this.
     If the character(c_serial) is not existent, you have to get
     more information about the character by using get_character_info
     command specifying c_serial value.

=c2s 73 forecast_location   ( int x, int y, int z )
=s2c 74 forecast_location_pasv ( int c_serial, int x, int y, int z )

  This command can be used to improve response of game play.
  GMSV does not perform any check against this command,
  and simply broadcast this command to all neighbour clients.

  This command takes some more server traffic, so if you don't need
  quick response, you can just remove this command from protocol.

=c2s 81 get_character_info   ( int c_serial )
=s2c 82 get_character_info_r ( int c_serial, char tag[128], int base_type )

  Get character information from server. Arguments of this protocol
  command will differ from game to game, because each game will show
  different information in their user terminal screen.
  In mm-suite initiail distribution, it will send character's nickname
  in tag[]. base_type argument contains character's base graphic type ID.

=s2c 86 field_info_pasv ( char id[32] )

  Get field information from server.
  GMSV will send this command when character log in to a field,
  or moved from one field to another field.
  Character always exists on som field.

=c2s 87 notify_graphics      ( int base_type )
=s2c 88 notify_graphics_pasv ( int c_serial, int base_type )

  Notify changes on character base graphic ID.
  If client program want to change character graphic ID,
  notify_graphics command is used. But, in many cases, you don't
  want it be changed by client without cheat-checking.
  If so, you can add cheat check routine in notify_graphics receiver
  function, or just remove this command.

  GMSV broadcasts notify_graphics_pasv command to neighbour players
  when receiving notify_graphics command, or when character graphic ID
  is changed by game logic ( for example, the character equipped a
  new item ).

=c2s 89 notify_temporary_motion       ( int motion_type, int param[4] )
=s2c 90 notify_temporary_motion_pasv  ( int c_serial, int motion_type, int param[4] )

  Send temporary character motion (waving, bowing, sitting,
  laying, attacking ...) to client.  On the other hand, to change
  character base graphics, you have to use notify_graphics_pasv command.

  In mm-suite initial distribution demo, motion_type is 1 only.
  motion_type and param[] definition is :
  motion_type = 1 : attacking
  param[0] : X coordinate of attacking place
  param[1] : Y coordinate of attacking place

  motion_type and param should be defined by each application.
  As same as other protocol commands, GMSV will broadcast
  notify_temporary_motion to neighbours by notify_temporary_motion_pasv
  command.
  
=s2c 92 notify_connect_change_pasv	(char IPAddress[100], int portnum)

  When a client move to other server,
  the server notify client to change connection with other server,

=c2s 93 warp_check_password_login_character	(int msgid, int majorversion, int minorversion, int tick, char id[32], char password[32], char cdkey[32], int slotid )
=s2c 94 warp_check_password_login_character_r (int msgid, int result )
  
  When a client move to other server,
  a character login process do at a time.

=c2s 95 get_field_data    ( int msgid, int x1, int y1, int x2, int y2 )
=s2c 96 get_field_data_r  ( int msgid, int result, int x1[1000], int y1[1000], int x2[1000], int y2[1000], int x3[1000], int y3[1000], int type[1000] )

  Get map data from GMSV specifying data region.
  Argument (x1,y1) to (x3,y3) are defined because map data consist
  of triangle polygons in mm-suite initial distribution.
  Argument "type" is now defined as below:
  1 : COLLISION
  2 : LINK ( hyper-link to another field)
  these constants are defined in EVENTTYPE enemeration.

  In mm-suite demo, local collision(hit) can be switched on or off,
  but in normal game play situation, it should be turned on.
  Mapdata is not valid if result is not zero.

  Client program should implement an algorithm to avoid
  server traffic of sending polygon data.


=s2c 98 notify_delete_pasv ( int c_serial, int opt )

  Delete a character from screen. Sent from GMSV to client.
  c_serial is used to specify a character which will be removed.
  opt argument specifies how to remove the character.
  opt = 0 : just remove
  opt = 1 : attacked, and died.
  You can add new opt argument if you have different types
  of removing character from screen.

#
# Chat commands
#
#
#
=c2s 101 talk       ( char msg[200] )
=s2c 102 talk_pasv  ( int c_serial, char msg[200] )

  Send chat message from client.
  GMSV will broadcast talk_pasv to neighbour clients when receiving talk
  command.
  c_serial specifies who has talked.
  msg[] argument is chat message itself.

  In mm-suite demo program, local echo is not implemented.
  If the client doesn't know who is c_serial, client have to
  get character information using c_serial and get_character_info command.

  If talk command failed by something wrong, GMSV just throuws
  this command away.
  

#
# Instant messaging
#
#
#

=c2s 111 mail    ( int msgid, char to_id[32], char head[200], char msg[200] )
=s2c 112 mail_r  ( int msgid, int result )

  Try to send an instant message through game server.
  GMSV will transmit this message to MSGSV without modifying anything.
  Even if the destination user is logging in the same GMSV, the
  message will be transmitted to MSGSV for logging.

  GMSV returns zero in result argument if successfuly receievd the message.
  But please note that result=0 doesn't mean that the transmitted
  message is received by destination user. (This is just same
  SMTP's successful session)

  There is no way to find out that the message is received by
  destination user.

=s2c 114 mail_pasv  ( char from_id[32], char message_id[64], char head[200], char msg[200] )

  Send a message from GMSV to client.
  Client should remove the message from server mailbox by
  mail_delete command just after receiving this command.
  
=c2s 115 mail_delete   ( char message_id[64] )

  Delete a message from server mailbox.

=c2s 117 mail_poll     ( int num )

  Poll user's mailbox and check new message.
  num argument specifies max number of messages polled in one time.
  In usual case, it is set about 10. After polling 10 messages,
  client program can send next mail_poll command.

#
# BBS control commands
#
# Write a message in BBS, see BBS, and remove by password and time.
# BBS is implemented on MSGSV, so GMSV is just relaying message from
# client to MSGSV ( slow queries).
#

=c2s 121 bbs_write ( int msgid, char bbs_name[32], char msg[1024], char delete_password[32] )
=s2c 122 bbs_write_r ( int msgid, int result )

  Write a message in BBS. Content of this command is same as msgproto's
bbs_write.

=c2s 123 bbs_get_log ( int msgid, char bbs_name[32], int ofs, int num )
=s2c 124 bbs_get_log_r ( int msgid, int result, int num, stringarray tag[64][128], stringarray text[64][1024], int time[256] )

  Get BBS log from MSGSV. You can get up to 64 messages in one time.
  If you want to get more messages than this limitation, you can modify
  the max number, but please note that you have to change msgproto's
  max number also.

=c2s 125 bbs_delete_log ( int msgid, char bbs_name[32], int time, char delete_password[32] )
=s2c 126 bbs_delete_log_r ( int msgid, int result )

  Remove BBS log by specifying password and time.
  All messages are removed matching the specified time.
  This action will not restored.
  
#
#
# Other commands
#
#

=c2s 131 attack    ( int dx, int dy )

  Attack another character specifying direction in mode-less MMORPG.

  dx and dy argument just specicies direction of the attack.
  GMSV has some cheat-checking against this command for example:

  1) Max distance of attacking is strictly limited
  2) Max frequency of attacking is strictly limited ( 0.2sec)

  To avoid cheat-check 2, client have to wait more than 0.2sec
  before sending next attack command.
  

#
#
# Character status change, specific in each application
#
#

=c2s 151 get_character_status         ( int c_serial )
=s2c 152 character_status_notify_pasv ( int c_serial, int maxhp, int hp )

  Notify changes on user's character status.
  
  "character_status_notify_pasv" will be sent by GMSV without polling
  from client. Client can also get character_status_notify_pasv
  by sending get_character_status also.
  In mm-suite demo, each character only has HP(hit point), so
  this command includes HP only. If your application has more
  information in one character, you have to add arguments in
  this command, or add more notification protocol commands,
  for example ( character_parameter_notify, character_item_notify,
  and so on)

  Argument "hp" will be sent from GMSV to client when character's
  hit point is changed by being attacked, or using items.
